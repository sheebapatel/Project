/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package rlanguage;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author owner
 */
public class preprocessing extends javax.swing.JFrame {
File path;
String[] name=new String[100];
           int[] positive=new int[100];
           int[] negative=new int[100];
             String[] comment=new String[100];
            String[] id=new String[100];
            String[] comment1=new String[100];
            String[] comment2=new String[100];
            int[] pp1=new int[100];
            int[] pp2=new int[100];
            int[] pp3=new int[100];
    /**
     * Creates new form preprocessing
     */
    public preprocessing(String[] id1,String[] name1,String[] comment1) {
       // path=f1;
       id=id1;
       name=name1;
       comment=comment1;
       int i=0;
       while(comment[i]!=null)
       {
           System.out.println(" hi"+comment[i]);
           i++;
       }
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jt1 = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("Find Positive and Negative tweets");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jt1.setBackground(new java.awt.Color(255, 0, 204));
        jt1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jt1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "id", "Positive tweets", "Negative tweets", "Neutral tweets"
            }
        ));
        jScrollPane1.setViewportView(jt1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(84, 84, 84)
                        .addComponent(jButton1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(71, 71, 71)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 587, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(52, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addComponent(jButton1)
                .addGap(92, 92, 92)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(180, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        int j=0;
        try{
        while(comment[j]!=null)
        {
            comment1[j]="";
            //Scanner sc1=new Scanner(new File("positive.txt"));
            String sd=comment[j].trim();
            String[] s1=sd.split(" ");
            for(String s2:s1)
            {
                 
                    try{
                    System.out.println(s2);
                    
            Porter p2=new Porter();
                String s3=p2.Porter1(s2.trim());
                comment1[j]=comment1[j]+s3+" ";
                
                    }
                    catch(Exception e1){e1.printStackTrace();}
                
            }
            comment1[j].trim();
            j++;
        }
        j=0;
        while(comment1[j]!=null)
        {
            System.out.println("hi   "+comment1[j]);
            j++;
        }
        j=0;
        Scanner sc1=new Scanner(new File("synonym1.txt"));
        Scanner sc2=new Scanner(new File("antonym1.txt"));
       BufferedWriter bw1=new BufferedWriter(new FileWriter("synonym.txt"));
        BufferedWriter bw2=new BufferedWriter(new FileWriter("antonym.txt"));
       Porter p1=new Porter();
        while(sc1.hasNextLine()){
            String s9=sc1.nextLine();
            String[] s10=s9.split(" ");
            for(String as:s10)
            {
            String n1=p1.Porter1(as);
            bw1.append(n1+" ");
            }
            bw1.newLine();
        }
        bw1.close();
        sc1.close();
        
           while(sc2.hasNextLine()){
            String s9=sc2.nextLine();
            String[] s10=s9.split(" ");
            for(String as:s10)
            {
            String n1=p1.Porter1(as);
            bw2.append(n1+" ");
            }
             
            bw2.newLine();
        }
              
       
           bw2.close();
            j=0;
        while(comment1[j]!=null)
        {
            int po1=0;
            int ne1=0;
            String g1="";
            String g2="";
          comment2[j]="";
            positive[j]=0;
            negative[j]=0;
            String r=comment1[j].trim();
            String[] s9=r.split(" ");
            System.out.println(" vvvbvbvbvb"+r);
            Porter p3=new Porter();
            for(String s10:s9)
            {
                int flag=0;
       //         System.out.print(s10+" ");
                Scanner sc12=new Scanner(new File("positive.txt"));
                while(sc12.hasNext())
                {
                    String po=sc12.next();
                    String po9=p3.Porter1(po.trim());
                    if(s10.equalsIgnoreCase(po9))
                    {
                        //po1++;
                        flag=1;
                        //comment2[j]=comment2[j]+s10+" ";
                        System.out.println(s10);
                        //g1=g1+s10+" ";
                    }
                }
                if(flag==1)
                {
                    po1++;
                    g1=g1+s10+" ";
                }
                else if(flag==0){
                 Scanner sc13=new Scanner(new File("negative.txt"));
                while(sc13.hasNext())
                {
                    String po=sc13.next().trim();
                      String po9=p3.Porter1(po);
                    if(s10.equalsIgnoreCase(po9))
                    {
                        
                        flag=1;
                        System.out.println(s10);
                        //comment2[j]=comment2[j]+s10+" ";
                       // g2=g2+s10+" ";
                    }
                }
                if(flag==1)
                    ne1++;
                    g2=g2+s10+" ";
                }
                
              
             positive[j]=po1;
            
             negative[j]=ne1;
            
             }   
             System.out.println(positive[j]+" "+negative[j]);
            comment2[j]=g1+g2;
            j++;
        }
        
        j=0;
        
        while(comment2[j]!=null)
        {
            System.out.println(" hghjghjg"+comment2[j]);
            j++;
        }
        j=0;
        while(comment2[j]!=null)
        {
            String[] s9=comment2[j].split(" ");
            for(String s10:s9)
            {
            
                int k=0;
                String[] word=new String[100];
                s10=new Porter().Porter1(s10);
                 int flag=0;
      String synonyms="";
        Scanner f1 = null;
    try {
        f1=new Scanner(new File("synonym.txt"));
    } catch (FileNotFoundException ex) {
        Logger.getLogger(preprocessing.class.getName()).log(Level.SEVERE, null, ex);
    }
        while(f1.hasNextLine()){
        String s1=f1.nextLine();
        String[] s2=s1.split(" ");
        for(String s:s2){
        if(s.equals(s10))
        {
            
            synonyms=s1;
            System.out.println("hi");
        }
         
        }
        }
        if(synonyms.equals(""))
        { 
            System.out.println("no");
            
        }
        else{
             String[] syno=synonyms.split(" ");
            for(String a:syno)
            {
                word[k]=a;
                k++;
            }
            int nm=0;
             k=0;
            while(word[k]!=null)
            {
                int po1=0;
                int ne1=0;
                int flag1=0;
                Scanner sc12=new Scanner("positive.txt");
                while(sc12.hasNext())
                {
                    String po=sc12.next();
                    if(s10.equalsIgnoreCase(po))
                    {
                        flag1=1;
                    }
                }
                if(flag1==1)
                {
                           po1++;
                        comment2[j]=comment2[j]+s10+" ";
                 
                }
                else if(flag1==0){
                Scanner sc13=new Scanner("negative.txt");
                while(sc13.hasNext())
                {
                    String po=sc13.next();
                    if(s10.equalsIgnoreCase(po))
                    {
                       flag1=1;
                    }
                }
                if(flag1==1)
                {
                     ne1++;
                        comment2[j]=comment2[j]+s10+" ";
                }
                }
             positive[j]=positive[j]+po1;
             negative[j]=negative[j]+ne1;
            //sc12.close();
            //sc13.close();
                k++;
            }
        }
                
            }
            j++;
        }
        j=0;
        while(comment2[j]!=null)
        {
            System.out.println(" "+comment2[j]+" Positive "+positive[j]+" neg=>"+negative[j]);
        String[] new1={"not","wont","cant","no"};
        int ne1=0;
        if(positive[j]==0 && negative[j]==0)
        {
            String[] x=comment[j].split(" ");
            int i=0;
            for(String r1:x)
            {
                for(i=0;i<new1.length;i++)
                {
                    if(r1.equals(new1[i]))
                    {
                        ne1++;
                    }
                }
            }
            if(ne1==0)
            {
                positive[j]=1;
            }
            else
                negative[j]=ne1;
        }
         Class.forName("oracle.jdbc.driver.OracleDriver");  
  
//step2 create  the connection object  
Connection con1=DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:xe","system","ssbt");  
 System.out.println("Connect");
//step3 create the statement object  
Statement stmt1=con1.createStatement();  
 int n=stmt1.executeUpdate("insert into posnig values("+(j+1)+","+positive[j]+","+negative[j]+")");  
 String result="";
 if(positive[j]==negative[j])
 {pp3[j]++;
     result="neutral";
 }
 else if(positive[j]>negative[j])
 {
     pp1[j]++;
     result="positive";
 }
 else
 {
     pp2[j]++;
     result="negative";
 }
 
      n=stmt1.executeUpdate("insert into result values("+(j+1)+",'"+id[j]+"',"+pp1[j]+","+pp2[j]+","+pp3[j]+")");  
    
     j++;
        }
         Class.forName("oracle.jdbc.driver.OracleDriver");  
  
//step2 create  the connection object  
Connection con1=DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:xe","system","ssbt");  
 System.out.println("Connect");
//step3 create the statement object  
Statement stmt1=con1.createStatement();  
ResultSet rs=stmt1.executeQuery("select id,sum(positive),sum(negative),sum(neutral) from result group by(id)");
        
        }
        catch(Exception e){e.printStackTrace();}
        
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(preprocessing.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(preprocessing.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(preprocessing.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(preprocessing.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                //new preprocessing().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jt1;
    // End of variables declaration//GEN-END:variables
}
